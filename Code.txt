CODE
redThresh = 0.10;
vidDevice = imaq.VideoDevice('winvideo', 1, 'YUY2_640x480', ...
'ROI', [1 1 640 400], ...
'ReturnedColorSpace', 'rgb');
vidInfo = imaqhwinfo(vidDevice);
hblob = vision.BlobAnalysis('AreaOutputPort', false, ... % Set blob analysis handling
'CentroidOutputPort', true, ...
'BoundingBoxOutputPort', true', ...
'MinimumBlobArea', 400, ...
'MaximumBlobArea', 4000, ...
'MaximumCount', 1);
hshapeinsRedBox = vision.ShapeInserter('BorderColor', 'Custom', ... % Set Red box handling
'CustomBorderColor', [1 0 0], ...
'Fill', true, ...
'FillColor', 'Custom', ...
'CustomFillColor', [1 0 0], ...
'Opacity', 0.4);
htextins = vision.TextInserter('Text', 'Number of Red Object: %2d', ... % Set text for number of blobs
'Location', [7 2], ...
'Color', [1 0 0], ... // red color
'FontSize', 12);
htextinsCent = vision.TextInserter('Text', '+ X:%4d, Y:%4d', ... % set text for centroid
'LocationSource', 'Input port', ...
'Color', [1 1 0], ... // yellow color
'FontSize', 14);
hVideoIn = vision.VideoPlayer('Name', 'Final Video', ... % Output video player
'Position', [100 100 vidInfo.MaxWidth+20 vidInfo.MaxHeight+30]);
nFrame = 0;
%% Processing Loop
while(nFrame < 200)
rgbFrame = step(vidDevice);
rgbFrame = flipdim(rgbFrame,2);
diffFrame = imsubtract(rgbFrame(:,:,1),rgb2gray(rgbFrame));
diffFrame = medfilt2(diffFrame, [3 3]);
binFrame = im2bw(diffFrame, redThresh);
[centroid, bbox] = step(hblob, binFrame);
centroid = uint16(centroid);
rgbFrame(1:20,1:165,:) = 0;
vidIn = step(hshapeinsRedBox, rgbFrame, bbox);
for object = 1:1:length(bbox(:,1))
centX = centroid(object,1); centY = centroid(object,2);
if (centX <80 && centX >0)
fs=8192;
t=[0:1/fs:1];
y = sin(2*pi*440*2^(1/12)*t);
soundsc(y);
pause(0.5);
end
if (centX <160 && centX >80)
fs=8192;
t=[0:1/fs:1];
y = sin(2*pi*440*2^(3/12)*t);
soundsc(y);
pause(0.5);
end
if (centX <240 && centX >160)
fs=8192;
t=[0:1/fs:1];
y = sin(2*pi*440*2^(5/12)*t);
soundsc(y);
pause(0.5);
end
if (centX <320 && centX >240)
fs=8192;
t=[0:1/fs:1];
y = sin(2*pi*440*2^(6/12)*t);
soundsc(y);
pause(0.5);
end
if (centX <400 && centX >320)
fs=8192;
t=[0:1/fs:1];
y = sin(2*pi*440*2^(6/12)*t);
soundsc(y);
pause(0.5);
end
if (centX <480 && centX >400)
fs=8192;
t=[0:1/fs:1];
y = sin(2*pi*440*2^(8/12)*t);
soundsc(y);
pause(0.5);
end
if (centX <560 && centX >480)
fs=8192;
t=[0:1/fs:1];
y = sin(2*pi*440*2^(10/12)*t);
soundsc(y);
pause(0.5);
end
if (centX <640 && centX >560)
fs=8192;
t=[0:1/fs:1];
y = sin(2*pi*440*2^(12/12)*t);
soundsc(y);
pause(0.5);
end
if (centX <720 && centX >640)
fs=8192;
t=[0:1/fs:1];
y = sin(2*pi*440*2^(13/12)*t);
soundsc(y);
pause(0.5);
end
vidIn = step(htextinsCent, vidIn, [centX centY], [centX-6 centY-9]);
end
vidIn = step(htextins, vidIn, uint8(length(bbox(:,1))));
step(hVideoIn, vidIn);
nFrame = nFrame+1;
end
%% Clearing Memory
release(hVideoIn); % Release all memory and buffer used
release(vidDevice);
clear all;
clc;